using System.Diagnostics;
using System.Text;
using Microsoft.CodeAnalysis;

namespace SourceGenerator
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            Debug.WriteLine(">>>>>>>>>>>>>>>> Execute code generator");

            StringBuilder source = new StringBuilder();
            var header = @"// <auto-generated/>
                using System;
                using System.Runtime.CompilerServices;
                ";
            source.AppendLine(header);

            Intercept(context, source, "SayHello", body: """Console.WriteLine($"Bye {param}. Hello Tymek!");""");

            ;

            Intercept(context, source, "SayHello2", body: """
                var correct_names = new []{"Orville", "Wilbur"};
                var name = param;
                var tries_left = 3;

                bool GoodName(string n) => 
                    correct_names.Any(c_n => string.Equals(n, c_n, StringComparison.InvariantCultureIgnoreCase));
                

                if(!GoodName(name))
                {
                    Console.WriteLine($"Hello who? Mm mm. Please enter the correct name:");
                    name = Console.ReadLine();
                    tries_left--;
                }
                
                while(!GoodName(name))
                {
                    tries_left--;
                    Console.WriteLine($"No. That's not a Wright name. Please enter the correct name:");
                    name = Console.ReadLine();
                    if(tries_left == 0)
                    {
                        Console.WriteLine($"Argh...I give up...");
                        return;
                    }
                }
                Console.WriteLine($"Yes! Hello {name}!");
                """);

            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

            if (mainMethod == null)
            {
                throw new Exception("No main method found!");
            }

            var typeName = mainMethod.ContainingType.Name;

            // // Add the source code to the compilation
            context.AddSource($"{typeName}.g.cs", source.ToString());
        }

        private static void Intercept(GeneratorExecutionContext context, StringBuilder source, string methodName, string body)
        {
            source.AppendLine($$"""
                public static class Intercept{{methodName}}
                {
                """);

            foreach (SyntaxTree tree in context.Compilation.SyntaxTrees)
            {
                //source.AppendLine("//" + tree.ToString());
                Intercept(methodName, source, tree);
            }

            if (!context.Compilation.SyntaxTrees.Any())
            {
                source.AppendLine("// No syntax trees ;()");
            }

            source.AppendLine($$"""

            public static void InterceptorMethod(this MyClass x, string param)
                    {
                        {{body}}
                    }
            """);

            source.AppendLine("}");
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }

        static void Intercept(string method, StringBuilder source, SyntaxTree tree)
        {
            var locations = Gens.Helpers.FindMethodInvocation(method, tree);


            foreach (var location in locations)
            {
                var ls = location.GetLineSpan();
                source.Append($$""""

                    [InterceptsLocation("""{{ls.Path}}""", line: {{ls.Span.Start.Line + 1}}, character: {{ls.Span.Start.Character + 1}})] 
                    """");
            }




        }

    }
}